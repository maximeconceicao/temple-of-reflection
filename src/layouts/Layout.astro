---
import AppShell from "@/components/AppShell";
import { allCategories, GardenCategory } from "@/lib/categories";
import { getCollection } from "astro:content";
import "../styles/global.css";
const { title, toc } = Astro.props;

const allEntriesArrays = await Promise.all(
  allCategories.map((category) => getCollection(category))
);

const allEntries = allEntriesArrays.flat();
const categories = Object.values(GardenCategory).map((category) => ({
  category,
  count: allEntries.filter((entry) => entry.data.category === category).length,
}));

categories.sort((a, b) => b.count - a.count);
---

<script is:inline>
  const getThemePreference = () => {
    if (typeof localStorage !== "undefined" && localStorage.getItem("theme")) {
      return localStorage.getItem("theme");
    }
    return window.matchMedia("(prefers-color-scheme: dark)").matches
      ? "dark"
      : "light";
  };
  const isDark = getThemePreference() === "dark";
  document.documentElement.classList[isDark ? "add" : "remove"]("dark");

  if (typeof localStorage !== "undefined") {
    const observer = new MutationObserver(() => {
      const isDark = document.documentElement.classList.contains("dark");
      localStorage.setItem("theme", isDark ? "dark" : "light");
    });
    observer.observe(document.documentElement, {
      attributes: true,
      attributeFilter: ["class"],
    });
  }
</script>

<html lang="fr">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <title>{title}</title>
  </head>
  <body>
    <main class="flex min-h-screen">
      <AppShell client:load categories={categories} toc={toc}>
        <slot />
      </AppShell>
    </main>
  </body>
</html>
