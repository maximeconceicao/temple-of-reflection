---
import Layout from "@/layouts/Layout.astro";
import { getCollection } from "astro:content";
import {
  allCategories,
  categoryMeta,
  typeMeta,
  GardenCategory,
} from "@/lib/categories";
import BreadcrumbNav from "@/components/BreadcrumbNav.astro";
import { Square } from "lucide-react";

export async function getStaticPaths() {
  return allCategories.map((category) => ({
    params: { category },
  }));
}

const category = Astro.params.category as GardenCategory;

if (!allCategories.includes(category)) {
  throw new Error("Cat√©gorie inconnue");
}

const entries = await getCollection(category);

// const groupedByType = entries.reduce(
//   (acc: Record<string, typeof entries>, entry) => {
//     const type = entry.data.type;
//     if (!acc[type]) acc[type] = [];
//     acc[type].push(entry);
//     return acc;
//   },
//   {}
// );

const entriesSorted = entries.sort((a, b) => {
  const dateA = new Date(a.data.pubDate);
  const dateB = new Date(b.data.pubDate);
  return dateB.getTime() - dateA.getTime();
});

const Icon = categoryMeta[category].icon;
---

<Layout title={categoryMeta[category].label}>
  {
    (
      <main>
        <section class="flex flex-row items-center gap-2">
          <Icon
            className="w-10 h-10"
            style={{ stroke: `var(--${categoryMeta[category].color})` }}
          />
          <h2 class="text-4xl font-semibold">{categoryMeta[category].label}</h2>
        </section>

        <section class="mt-4 mb-8">
          <BreadcrumbNav
            items={[
              { label: "Home", href: "/" },
              { label: categoryMeta[category].label, href: `/${category}` },
            ]}
          />
        </section>

        <section class="grid grid-cols-1">
          <div class="hidden sm:grid grid-cols-3 text-sm text-left border-b pb-1">
            <span>/DATE</span>
            <span>/TITRE</span>
            <span>/TYPE</span>
          </div>
          {entriesSorted.map((entry) => {
            const date = new Date(entry.data.pubDate);
            const formattedDate = `${date.getFullYear()}.${String(date.getMonth() + 1).padStart(2, "0")}.${String(date.getDate()).padStart(2, "0")}`;
            return (
              <div class="grid grid-cols-1 sm:grid-cols-3 py-2 border-b gap-1 sm:gap-0">
                <div class="flex flex-row items-center">
                  <Square className="w-2 h-2 mr-1" fill="var(--foreground)" />
                  <span class="text-sm ">{formattedDate}</span>
                </div>
                <a
                  href={`/${category}/${entry.slug}`}
                  class="hover:underline text-lg"
                  style={{ color: `var(--${categoryMeta[category].color})` }}
                >
                  {entry.data.title}
                </a>
                <span class="hidden sm:flex items-center border px-2 py-0.5 rounded text-xs w-fit">
                  {typeMeta[entry.data.type].label.toUpperCase()}
                </span>{" "}
              </div>
            );
          })}
        </section>
      </main>
    )
  }
</Layout>
