---
import type { APIContext } from "astro";
import { getCollection } from "astro:content";
import { Markdown } from "astro/components";
import { allCategories } from "@/lib/categories";

export async function getStaticPaths() {
  const allPaths = await Promise.all(
    allCategories.map(async (category) => {
      const entries = await getCollection(category);
      return entries.map((entry) => ({
        params: {
          category,
          slug: entry.slug,
        },
      }));
    })
  );

  return allPaths.flat();
}

export async function get({ params }: APIContext) {
  const { category, slug } = params;

  if (!category || !slug || !allCategories.includes(category as any)) {
    return new Response("Paramètres invalides", { status: 404 });
  }

  const entries = await getCollection(category as any);

  const matchedEntry = entries.find((entry) => entry.slug === slug);

  if (!matchedEntry) {
    return new Response("Contenu non trouvé", { status: 404 });
  }

  return {
    props: {
      entry: matchedEntry,
    },
  };
}

const { entry } = Astro.props;
---

<article class="prose lg:prose-xl mx-auto">
  <h1>{entry.data.title}</h1>
  <p class="text-sm text-gray-500">
    {entry.data.type} — {entry.data.category}
  </p>
  <Markdown content={entry.body} />
</article>
